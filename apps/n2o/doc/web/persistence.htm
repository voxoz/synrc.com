<!DOCTYPE html>
<html >
<head>

  <link rel=stylesheet type="text/css" href="//synrc.com/synrc.css?v=3">
  <meta name="Author" content="5HT">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta property="og:image" content="images/s_64.png"/>
  <meta http-equiv="X-UA-Compatible" content="IE=IE10,chrome=1" />
  <title>N2O Persistence
</title>
</head>
<body >
<!--HEVEA command line is: hevea persistence.tex -o persistence.htm -->
<!--CUT STYLE article--><!--HTMLHEAD-->

<div class="nonselectedwrapper white" style="padding: 10px 0px 10px 0px;margin: 0px 0px 10px 0px;">
    <a href="//synrc.com/">
    <img style="float:left; margin-left: 55px; margin-top: 5px; margin-bottom:-5px;" src="//synrc.com/images/synrc.png" border="0"></a>

    <form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top" style="display:none;margin-top:39px;">
      <input type="hidden" name="cmd" value="_s-xclick">
      <input type="hidden" name="hosted_button_id" value="P8WQHAQK5HWWW">
      <input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif" border="0" name="submit" style="width:74px;margin-top:0px;">
     </form>

    <div align=right style="float:right;width:700px;height: auto; margin: 20px 50px 0px 0px;">
          <script type="text/javascript">

        var args = (window.location).toString().split('/');
        var page_name = args[args.length-1];
        var menu = {'//synrc.com/index.htm':    'Home',
                    '//synrc.com/research.htm': 'Showcase',
                    '//synrc.com/apps/':   'Apps',
                    '//synrc.com/feedback.htm': 'Contacts' };

        Object.keys(menu).forEach(function (key) {
            if (page_name == key) { document.write('<div class="menu" style="font-weight: bold;">'+menu[key]+'</div>'); }
            else { document.write('<a class="menu" href="'+key+'">'+menu[key]+'</a>'); }
        });

        </script>
    </div>
</div>

<hr size="1">

<!--ENDHTML-->
<!--CUT DEF section 1 --><div class="nonselectedwrapper">
<div class="article">
<div class="toc">
<!--TOC section id="sec1" TOC-->
<h2 id="sec1" class="section">TOC</h2><!--SEC END -->
<!--TOC paragraph id="sec2" -->
<!--SEC END --><p>
<a href="//synrc.com/apps/n2o/doc/web">1. Framework</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/setup.htm">2. Setup</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/processes.htm">3. Processes</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/endpoints.htm">4. Endpoints</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/handlers.htm">5. Handlers</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/protocols.htm">6. Protocols</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/api.htm">7. API</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/elements.htm">8. Elements</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/actions.htm">9. Actions</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/macros.htm">10. JavaScript</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/utf8.htm">11. UTF-8</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/packages.htm">12. Packages</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/persistence.htm">13. Persistence</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/last.htm">14. History</a> <br>

<a href="//synrc.com/apps/n2o/doc/book.pdf">Download PDF</a> <br>

</p></div>

<div class="articlecol">

<!--TOC section id="sec3" KVS: Abstract Erlang Database-->
<h2 id="sec3" class="section">KVS: Abstract Erlang Database</h2><!--SEC END --><p>KVS is an Erlang abstraction over various native Erlang key-value databases,
like Mnesia. Its meta-schema includes only concept
of iterators (persisted linked lists) that are locked or guarded by
containers (list head pointers). All write operations to the list are
serialized using a single Erlang process to provide sequential consistency. The application
which starts Erlang processes per container called <a href="https://github.com/synrc/feeds">feeds</a>.</p>
<!--TOC paragraph id="sec4" -->
<!--SEC END --><p>
The best use-case for KVS and key-value storages is to store operational data.
This data should be later fed to SQL data warehouses for analysis. Operational data
stores should be scalable, secure, fault-tolerant and available. That is why
we store work-in-progress data in key-value storages.</p>
<!--TOC paragraph id="sec5" -->
<!--SEC END --><p>
KVS also supports queries that require secondary indexes, which
are not supported by all backends.
Currently KVS includes following storage backends: Mnesia, Riak and <a href="https://github.com/synrc/kai">KAI</a>.</p>
<!--TOC subsection id="sec6" Polymorphic Records-->
<h3 id="sec6" class="subsection">Polymorphic Records</h3><!--SEC END --><p>Any data in KVS is represented by regular Erlang records.
The first element of the tuple as usual indicates the name of bucket.
The second element usually corresponds to the index key field.</p><div class="lstlisting">            Rec = {user,"maxim@synrc.com",[]}.

     RecordName = element(1, Rec).
             Id = element(2, Rec).</div>
<!--TOC subsection id="sec7" Iterators-->
<h3 id="sec7" class="subsection">Iterators</h3><!--SEC END --><p>Iterator is a sequence of fields used as interface for all tables
represented as doubly-linked lists. It defines id, next, prev,
feed_id fields. This fields should be at the beginning of user’s record,
because KVS core is accessing relative position of the
field (like #iterator.next) with setelement/element BIF, e.g.</p><div class="lstlisting">    setelement(#iterator.next, Record, NewValue).</div><p>All records could be chained into the double-linked lists in the database.
So you can inherit from the ITERATOR record just like that:</p><div class="lstlisting">    -record(access, {?ITERATOR(acl),
        entry_id,
        acl_id,
        accessor,
        action}).</div><div class="lstlisting">    #iterator { record_name,
                id,
                version,
                container,
                feed_id,
                prev,
                next,
                feeds,
                guard }</div><p>This means your table will support add/remove linked list operations to lists.</p><div class="lstlisting">    1&gt; kvs:add(#user{id="mes@ua.fm"}).
    2&gt; kvs:add(#user{id="dox@ua.fm"}).</div><p>Read the chain (undefined means all)</p><div class="lstlisting">    3&gt; kvs:entries(kvs:get(feed, user), user, undefined).
    [#user{id="mes@ua.fm"},#user{id="dox@ua.fm"}]</div><p>or just</p><div class="lstlisting">    4&gt; kvs:entries(user).
    [#user{id="mes@ua.fm"},#user{id="dox@ua.fm"}]</div><p>Read flat values by all keys from table:</p><div class="lstlisting">    4&gt; kvs:all(user).
    [#user{id="mes@ua.fm"},#user{id="dox@ua.fm"}]</div>
<!--TOC subsection id="sec8" Containers-->
<h3 id="sec8" class="subsection">Containers</h3><!--SEC END --><p>If you are using iterators records this automatically
means you are using containers. Containers are just boxes
for storing top/heads of the linked lists. Here is layout
of containers:</p><div class="lstlisting">    #container { record_name,
                 id,
                 top,
                 entries_count }</div>
<!--TOC subsection id="sec9" Extending Schema-->
<h3 id="sec9" class="subsection">Extending Schema</h3><!--SEC END --><p>Usually you only need to specify custom Mnesia indexes and tables tuning.
Riak and KAI backends don’t need it. Group your table into table packages
represented as modules with handle_notice API.</p><div class="lstlisting">    -module(kvs_feed).
    -inclue_lib("kvs/include/kvs.hrl").

    metainfo() -&gt;
        #schema{name=kvs,tables=[

            #table{ name = feed, container = true,
                    fields = record_info(fields,feed)},

            #table{ name = entry, container = feed,
                    fields = record_info(fields,entry),
                    keys = [feed_id,entry_id,from] },

            #table{ name = comment, container = feed,
                    fields = record_info(fields,comment),
                    keys = [entry_id,author_id] } ]}.</div><p>And plug it into schema sys.config:</p><div class="lstlisting">    {kvs, {schema,[kvs_user,kvs_acl,kvs_feed,kvs_subscription]}},</div><p>After run you can create schema on local node with:</p><div class="lstlisting">    1&gt; kvs:join().</div><p>It will create your custom schema.</p>
<!--TOC subsection id="sec10" KVS API-->
<h3 id="sec10" class="subsection">KVS API</h3><!--SEC END -->
<!--TOC subsection id="sec11" Service-->
<h3 id="sec11" class="subsection">Service</h3><!--SEC END --><p>
System functions for start and stop service:</p><div class="lstlisting">    -spec start() -&gt; ok | {error,any()}.
    -spec stop() -&gt; stopped.</div>
<!--TOC subsection id="sec12" Schema Change-->
<h3 id="sec12" class="subsection">Schema Change</h3><!--SEC END --><p>
This API allows you to create, initialize and destroy the database schema.
Depending on database the format and/or feature set may differ. <span style="font-weight:bold">join/1</span> function
is used to initialize database, replicated from remote node along with its schema.</p><div class="lstlisting">    -spec destroy() -&gt; ok.
    -spec join() -&gt; ok | {error,any()}.
    -spec join(string()) -&gt; [{atom(),any()}].
    -spec init(atom(), atom()) -&gt; list(#table{}).</div>
<!--TOC subsection id="sec13" Meta Info-->
<h3 id="sec13" class="subsection">Meta Info</h3><!--SEC END --><p>
This API allows you to build forms from table metainfo.
You can also use this API for metainfo introspection.</p><div class="lstlisting">    -spec modules() -&gt; list(atom()).
    -spec containers() -&gt; list(tuple(atom(),list(atom()))).
    -spec tables() -&gt; list(#table{}).
    -spec table(atom()) -&gt; #table{}.
    -spec version() -&gt; {version,string()}.</div>
<!--TOC subsection id="sec14" Chain Ops-->
<h3 id="sec14" class="subsection">Chain Ops</h3><!--SEC END --><p>
This API allows you to modify the data, chained lists.
You can use <span style="font-weight:bold">create/1</span> to create the container.
You can add and remove nodes from lists.</p><div class="lstlisting">    -spec create(atom()) -&gt; integer().
    -spec remove(tuple()) -&gt; ok | {error,any()}.
    -spec remove(atom(), any()) -&gt; ok | {error,any()}.
    -spec add(tuple()) -&gt; {ok,tuple()} |
                          {error,exist} |
                          {error,no_container}.</div>
<!--TOC subsection id="sec15" Raw Ops-->
<h3 id="sec15" class="subsection">Raw Ops</h3><!--SEC END --><p>
These functions will patch the Erlang record inside database.</p><div class="lstlisting">    -spec put(tuple()) -&gt; ok | {error,any()}.
    -spec delete(atom(), any()) -&gt; ok | {error,any()}.</div>
<!--TOC subsection id="sec16" Read Ops-->
<h3 id="sec16" class="subsection">Read Ops</h3><!--SEC END --><p>
Allows you to read the Value by Key and list records with given secondary indexes.
<span style="font-weight:bold">get/3</span> API is used to specify default value.</p><div class="lstlisting">    -spec index(atom(), any(), any()) -&gt; list(tuple()).
    -spec get(atom(),any(), any()) -&gt; {ok,any()}.
    -spec get(atom(), any()) -&gt; {ok,any()} |
                                {error,duplicated} |
                                {error,not_found}.</div>
<!--TOC subsection id="sec17" Import/Export-->
<h3 id="sec17" class="subsection">Import/Export</h3><!--SEC END --><p>
You can use this API to store all database
in a single file when it is possible. It’s ok for development but not very good for production API.</p><div class="lstlisting">    -spec load_db(string()) -&gt; list(ok | {error,any()}).
    -spec save_db(string()) -&gt; ok | {error,any()}.</div><p>


    <!--div id="disqus_thread"></div>
    <script type="text/javascript">
        var disqus_shortname = 'synrc'; // required: replace example with your forum shortname
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="https://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a-->


</p></div>
</div>
</div><div class="clear"> </div><!--CUT END -->
<!--HTMLFOOT-->

<div class="nonselectedwrapper">
<div class="verywidecol">

    <div style="width:100%;height:300px;float:left;font-size:16pt;" align=center>
    	<hr size=1>
    	<br><br><br>
        <a href="//synrc.com/news/index.htm">Events</a> |
    	<a href="//synrc.com/privacy.htm">Privacy Policy</a> |
        <a href="//synrc.com/feedback.htm">Feedback</a> |
        <a href="//synrc.com/brandbook.htm">Brandbook</a><br>
    	Copyright &copy; 2005&ndash;2018 <a href="//synrc.com/index.htm"> Synrc Research Center s.r.o.</a>
    </div>

</div>
</div>


<div class="clear"></div>

<script type="text/javascript">

  var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-29227518-1']);
      _gaq.push(['_trackPageview']);
      
        (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
                    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
                      })();
                      
                      </script>

<script type="text/javascript" src="//synrc.com/hi.js"></script>
<!--ENDHTML-->
</body>
</html>
