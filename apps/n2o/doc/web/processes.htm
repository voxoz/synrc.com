<!DOCTYPE html>
<html >
<head>

  <link rel=stylesheet type="text/css" href="//synrc.com/synrc.css?v=3">
  <meta name="Author" content="5HT">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta property="og:image" content="images/s_64.png"/>
  <meta http-equiv="X-UA-Compatible" content="IE=IE10,chrome=1" />
  <title>N2O Processes
</title>
</head>
<body >
<!--HEVEA command line is: hevea processes.tex -o processes.htm -->
<!--CUT STYLE article--><!--HTMLHEAD-->

<div class="nonselectedwrapper white" style="padding: 10px 0px 10px 0px;margin: 0px 0px 10px 0px;">
    <a href="//synrc.com/">
    <img style="float:left; margin-left: 55px; margin-top: 5px; margin-bottom:-5px;" src="//synrc.com/images/synrc.png" border="0"></a>

    <form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top" style="display:none;margin-top:39px;">
      <input type="hidden" name="cmd" value="_s-xclick">
      <input type="hidden" name="hosted_button_id" value="P8WQHAQK5HWWW">
      <input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif" border="0" name="submit" style="width:74px;margin-top:0px;">
     </form>

    <div align=right style="float:right;width:700px;height: auto; margin: 20px 50px 0px 0px;">
          <script type="text/javascript">

        var args = (window.location).toString().split('/');
        var page_name = args[args.length-1];
        var menu = {'//synrc.com/index.htm':    'Home',
                    '//synrc.com/research.htm': 'Showcase',
                    '//synrc.com/apps/':   'Apps',
                    '//synrc.com/feedback.htm': 'Contacts' };

        Object.keys(menu).forEach(function (key) {
            if (page_name == key) { document.write('<div class="menu" style="font-weight: bold;">'+menu[key]+'</div>'); }
            else { document.write('<a class="menu" href="'+key+'">'+menu[key]+'</a>'); }
        });

        </script>
    </div>
</div>

<hr size="1">

<!--ENDHTML-->
<!--CUT DEF section 1 --><div class="nonselectedwrapper">
<div class="article">
<div class="toc">
<!--TOC section id="sec1" TOC-->
<h2 id="sec1" class="section">TOC</h2><!--SEC END -->
<!--TOC paragraph id="sec2" -->
<!--SEC END --><p>
<a href="//synrc.com/apps/n2o/doc/web">1. Framework</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/setup.htm">2. Setup</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/processes.htm">3. Processes</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/endpoints.htm">4. Endpoints</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/handlers.htm">5. Handlers</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/protocols.htm">6. Protocols</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/api.htm">7. API</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/elements.htm">8. Elements</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/actions.htm">9. Actions</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/macros.htm">10. JavaScript</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/utf8.htm">11. UTF-8</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/packages.htm">12. Packages</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/persistence.htm">13. Persistence</a> <br>

<a href="//synrc.com/apps/n2o/doc/web/last.htm">14. History</a> <br>

<a href="//synrc.com/apps/n2o/doc/book.pdf">Download PDF</a> <br>

</p></div>

<div class="articlecol">

<!--TOC section id="sec3" Erlang Processes-->
<h2 id="sec3" class="section">Erlang Processes</h2><!--SEC END -->
<!--TOC subsection id="sec4" Reduced Latency-->
<h3 id="sec4" class="subsection">Reduced Latency</h3><!--SEC END --><p>
The secret to reducing latency is simple. We try to deliver rendered HTML
as soon as possible and render JavaScript only when WebSocket initialization is complete.
It takes three steps and three Erlang processes for doing that.</p><p>

<img src="//synrc.com/apps/n2o/doc/images/page-lifetime.png" style="margin-left: -20px;margin-botton: 30px; padding:20 20 20 20px;"><br>

Picture. <span style="font-weight:bold">Page Lifetime</span><br>
<br>



N2O request lifetime begins with the start of HTTP process serving the first HTML page.
After that it dies and spawns Transition process.
Then the browser initiates WebSocket connections to the similar URL endpoint.
N2O creates persistent WebSocket process and the Transition process dies.</p>
<!--TOC paragraph id="sec5" -->
<!--SEC END --><p>
Your page could also spawn processes with <span style="font-weight:bold">wf:async</span>.
These are persistent processes that act like regular Erlang processes.
This is a usual approach to organize non-blocking UI for file uploads
and other time consuming operations.</p>
<!--TOC subsection id="sec6" Page Serving Process-->
<h3 id="sec6" class="subsection">Page Serving Process</h3><!--SEC END --><p>
This processes are applicable only to the case when you serving not static HTML,
but dynamically rendered pages with NITRO, DTL or ET template engines.
The very first HTTP handler only renders HTML. During page initialization
function Module:<span style="font-weight:bold">main/0</span> is called. This function should return raw HTML or
NITRO elements that could be rendered into raw HTML. All created on the way
JavaScript actions are stored in the transition process.</p><div class="lstlisting">    main() -&gt; #dtl { file     = "login",
                     app      = review,
                     bindings = [ { body,
                          #button { id       = send,
                                    postback = chat } } ] }.</div>
<!--TOC paragraph id="sec7" -->
<!--SEC END --><p>
HTTP handler will die immediately after returning HTML. Transition process
stores actions and waits for a request from a WebSocket handler.</p>
<!--TOC subsection id="sec8" Transition Process-->
<h3 id="sec8" class="subsection">Transition Process</h3><!--SEC END --><p>
Right after receiving HTML the browser initiates WebSocket connection
thus starting WebSocket handler on the server. After responding with
JavaScript actions the Transition process dies and the only process left
running is WebSocket handler. At this point initialization phase is complete.</p><div class="lstlisting">    transition(Actions) -&gt;
        receive {'N2O',Pid} -&gt; Pid ! Actions end.</div><p>Transition process is only applicable to dynamically rendered pages
served by <span style="font-weight:bold">n2o_document</span> endpoint. You never deal with it manually.</p>
<!--TOC subsection id="sec9" Events Process-->
<h3 id="sec9" class="subsection">Events Process</h3><!--SEC END --><p>
After that all client/server communication is performed over
WebSocket channel. All events coming from the browser are
handled by N2O, which renders elements to HTML and actions to
JavaScript. Each user at any time has only one WebSocket process
per connection.</p><div class="lstlisting">    event(init) -&gt; wf:reg(room);
    event(chat) -&gt; #insert_top(history,#span{body="message"}),
                   wf:flush(room).</div><p>This code will register all WebSocket processes under the same
topic in pubsub and broadcast history changing to all registered
process in the system under the same topic using <span style="font-weight:bold">#flush</span>
NITRO protocol message.</p>
<!--TOC paragraph id="sec10" -->
<!--SEC END --><p>
During page initialization before Module:<span style="font-weight:bold">event(init)</span>,
Module:<span style="font-weight:bold">main/0</span> is called to render initial postbacks for
elements. So you can share the same code to use SPA or DSL/DTL approach.</p>
<!--TOC subsection id="sec11" Async Processes-->
<h3 id="sec11" class="subsection">Async Processes</h3><!--SEC END --><p>
These are user processes that were created with <span style="font-weight:bold">wf:async</span> invocation.
This processes was very useful to organize persistent stateful connection
for legacy async technology like COMET for XHR channel. If you have problem with
proxying WebSocket stream you can easily use XHR fallback that is
provided by <span style="font-weight:bold">xhr.js</span> N2O companion library.
Async processes are optional and only needed when you have a UI event taking too much
time to be processed, like gigabyte file uploads. You can create
multiple async processes per user. Starting from N2O 2.9 all async
processes are being created as <span style="font-weight:bold">gen_server</span> under
<span style="font-weight:bold">n2o_sup</span> supervision tree.</p><div class="lstlisting">    event(init) -&gt; wf:reg(room),
                   wf:async("looper", fun async/1);

    async(init) -&gt; ok;
    aynsc(Chat) -&gt; io:format("Chat: ~p~n",[Chat]).</div>
<!--TOC subsection id="sec12" SPA Mode-->
<h3 id="sec12" class="subsection">SPA Mode</h3><!--SEC END --><p>
In SPA mode N2O can serve no HTML at all. N2O elements are
bound during initialization handshake and thus can be used
regularly as in DSL mode.</p>
<!--TOC paragraph id="sec13" -->
<!--SEC END --><p>
In the example provided in n2o/samples you can find two different
front end to the same <span style="font-weight:bold">review</span> application which consist of
two page modules <span style="font-weight:bold">index</span> and <span style="font-weight:bold">login</span>. You can access this application
involving no HTML rendering by using static file serving that could be
switched to direct nginx serving in production.</p><div class="lstlisting">    open http://localhost:8000/static/app/login.htm</div><p>Or you can see DTL rendered HTML pages which resides at following address:</p><div class="lstlisting">    open http://localhost:8000/login.htm</div><p>

    <!--div id="disqus_thread"></div>
    <script type="text/javascript">
        var disqus_shortname = 'synrc'; // required: replace example with your forum shortname
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="https://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a-->


</p></div>
</div>
</div><div class="clear"> </div><!--CUT END -->
<!--HTMLFOOT-->

<div class="nonselectedwrapper">
<div class="verywidecol">

    <div style="width:100%;height:300px;float:left;font-size:16pt;" align=center>
    	<hr size=1>
    	<br><br><br>
        <a href="//synrc.com/news/index.htm">Events</a> |
    	<a href="//synrc.com/privacy.htm">Privacy Policy</a> |
        <a href="//synrc.com/feedback.htm">Feedback</a> |
        <a href="//synrc.com/brandbook.htm">Brandbook</a><br>
    	Copyright &copy; 2005&ndash;2018 <a href="//synrc.com/index.htm"> Synrc Research Center s.r.o.</a>
    </div>

</div>
</div>


<div class="clear"></div>

<script type="text/javascript">

  var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-29227518-1']);
      _gaq.push(['_trackPageview']);
      
        (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
                    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
                      })();
                      
                      </script>

<script type="text/javascript" src="//synrc.com/hi.js"></script>
<!--ENDHTML-->
</body>
</html>
